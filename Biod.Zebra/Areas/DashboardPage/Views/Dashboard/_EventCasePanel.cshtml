@model Biod.Zebra.Library.Models.EventsInfoViewModel
@using Biod.Zebra.Library.Infrastructures
@using Newtonsoft.Json

<script>
    window.FilterEventResults = {
        totalCount: @Model.FilterParams.totalEvents,
        resultCount: @Model.EventsInfo.Count(),
        geonameIds: '@Model.FilterParams.geonameIds',
        geonames: @Html.Raw(Json.Encode(Model.FilterParams.geonames)),
        transmissionModesIds: '@Model.FilterParams.transmissionModesIds',
        interventionMethods: '@Model.FilterParams.InterventionMethods',
        locationOnly: @Model.FilterParams.locationOnly.ToString().ToLower(),
        severityRisks: '@Model.FilterParams.severityRisks',
        biosecurityRisks: '@Model.FilterParams.biosecurityRisks'
    };
    try {
        window.biod.map.updatePoints(
            JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(JsonConvert.SerializeObject(Model.EventsMap)))'),
            
            // EventInfo remove duplicates
            JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(JsonConvert.SerializeObject(Model.EventsInfo)))')
        );
    } catch (err) {}
</script>

<div id="gd-cases">
    @*UI for events START*@
    @{
        var evtIdList = new List<int>();
        var evtGroupList = new List<string>();
        var currentGroup = "";
    }
    @for (var i = 0; i < Model.EventsInfo.Count(); i++)
    {
        var item = Model.EventsInfo.ElementAt(i);
        if (evtIdList.IndexOf(item.EventId) < 0 || evtGroupList[evtIdList.IndexOf(item.EventId)] != item.Group)
        {
            evtIdList.Add(item.EventId);
            evtGroupList.Add(item.Group);

            var makeHeader = false;
            var makeFooter = false;
            if (!String.IsNullOrEmpty(item.Group))
            {
                if (currentGroup != item.Group)
                {
                    currentGroup = item.Group;
                    makeHeader = true;
                }
                if (currentGroup == item.Group)
                {
                    if (i + 1 == Model.EventsInfo.Count() || Model.EventsInfo.ElementAt(i + 1).Group != item.Group)
                    {
                        makeFooter = true;
                    }
                }
            }

            if (makeHeader)
            {
                var groupName = item.Group.Length > 2 && Int32.TryParse(item.Group.Substring(0, 1), out int result) ? item.Group.Substring(2) : item.Group;
                <div class="d-flex justify-content-between case-group-list-header">
                    <div class="col-10">
                        @*<span class="no-filter">No filters selected</span>*@
                        <span class="no-filter">@groupName</span>
                    </div>
                    <div id="case-group-toggle" class="col-2 text-right" data-toggle="collapse" data-target="#case-group-list-@i" aria-expanded="true" aria-controls="case-group-list-@i">
                        <button class="btn btn-link" style="height: 17px; width: 17px">
                            <svg class="expand" width="15" height="8" viewBox="0 0 15 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M1 1L7.08242 6.83393C7.13723 6.88658 7.20232 6.92834 7.27398 6.95684C7.34563 6.98533 7.42243 7 7.5 7C7.57757 7 7.65437 6.98533 7.72602 6.95684C7.79768 6.92834 7.86277 6.88658 7.91758 6.83393L14 1" stroke="#4F4F4F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                            <svg class="collapse" width="15" height="8" viewBox="0 0 15 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M14 7L7.91758 1.16607C7.86277 1.11342 7.79768 1.07166 7.72602 1.04316C7.65437 1.01467 7.57757 0.999999 7.5 0.999999C7.42243 0.999999 7.34563 1.01467 7.27398 1.04316C7.20232 1.07166 7.13723 1.11342 7.08242 1.16607L1 7" stroke="#4F4F4F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                        </button>
                    </div>
                </div>
            }

            if (makeHeader)
            {
                @Html.Raw("<div id='case-group-list-" + @i + "' class='collapse show' aria-labelledby='case-group-toggle'>")
            }

            <div id="event-@item.EventId"
                 class="gd-case"
                 data-eventid="@item.EventId">
                <div class="row">
                    <div class="col-8 d-flex align-items-center">
                        @if ((bool)item.HasOutlookReport)
                        {

                            <span class="outlook-report"
                                  title="Outlook report available">
                                <img src="~/Areas/DashboardPage/Content/images/outlookicon.svg" style="margin-right: 5px; margin-top: 5px;" />
                            </span>
                        }
                        <span class="gd-event-date">@item.StartDate - @item.EndDate</span>
                    </div>
                    <div class="col-4 text-right">
                        @{
                            if (item.LocalSpread)
                            {
                                <span class="gd-priority local-spread d-inline-flex align-items-baseline">
                                    <span class="local-spread" data-title=" " data-image="local-spread" data-port="imported" data-msg1="none" data-msg2="block">
                                        <img src="~/Areas/DashboardPage/Content/images/local-spread.svg" height="16" />
                                    </span>
                                </span>
                            }
                            else if (item.ImportationProbabilityName.ToLower() != "notavailable")
                            {
                                var importPercentageText = @StringFormattingHelper.GetInterval(item.ImportationProbabilityMin, item.ImportationProbabilityMax, "%");

                                <span class="gd-priority @item.ImportationProbabilityName.ToLower() d-inline-flex align-items-baseline">
                                    <span class="high" data-title="High probability" data-percentage="@importPercentageText" data-image="high" data-port="imported" data-msg1="block" data-msg2="none">
                                        <img src="~/Areas/DashboardPage/Content/images/high.svg" height="16" />
                                    </span>
                                    <span class="medium" data-title="Medium probability" data-percentage="@importPercentageText" data-image="medium" data-port="imported" data-msg1="block" data-msg2="none">
                                        <img src="~/Areas/DashboardPage/Content/images/medium.svg" height="16" />
                                    </span>
                                    <span class="low" data-title="Low probability" data-percentage="@importPercentageText" data-image="low" data-port="imported" data-msg1="block" data-msg2="none">
                                        <img src="~/Areas/DashboardPage/Content/images/low.svg" height="16" />
                                    </span>
                                    <span class="none" data-title="No probability" data-percentage="&mdash;" data-image="none" data-port="imported" data-msg1="block" data-msg2="none">
                                        <img src="~/Areas/DashboardPage/Content/images/none.svg" height="16" />
                                    </span>
                                    <img src="~/Areas/DashboardPage/Content/images/import-grey-icon.svg" height="16" class="ml-1" />
                                </span>
                            }
                        }
                        @{
                            var exportPercentageText = @StringFormattingHelper.GetInterval(item.ExportationProbabilityMin, item.ExportationProbabilityMax, "%");
                        }
                        <span class="gd-priority @item.ExportationPriorityTitle d-inline-flex align-items-baseline ml-2">
                            <span class="high" data-title="High probability" data-percentage="@exportPercentageText" data-image="high" data-port="exported" data-msg1="block" data-msg2="none">
                                <img src="~/Areas/DashboardPage/Content/images/high.svg" height="16" />
                            </span>
                            <span class="medium" data-title="Medium probability" data-percentage="@exportPercentageText" data-image="medium" data-port="exported" data-msg1="block" data-msg2="none">
                                <img src="~/Areas/DashboardPage/Content/images/medium.svg" height="16" />
                            </span>
                            <span class="low" data-title="Low probability" data-percentage="@exportPercentageText" data-image="low" data-port="exported" data-msg1="block" data-msg2="none">
                                <img src="~/Areas/DashboardPage/Content/images/low.svg" height="16" />
                            </span>
                            <span class="none" data-title="No probability" data-percentage="&mdash;" data-image="none" data-port="exported" data-msg1="block" data-msg2="none">
                                <img src="~/Areas/DashboardPage/Content/images/none.svg" height="16" />
                            </span>
                            <img src="~/Areas/DashboardPage/Content/images/export-grey-icon.svg" height="16" class="ml-1" />
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col gd-event-title">
                        @item.EventTitle
                    </div>
                </div>
                @*TODO: affect performance*@
                <div class="row">
                    <div class="col source-name txt-gold">
                        @{
                            for (var idx = 0; idx < item.SourceNameList.Count; idx++)
                            {
                                if (idx == 0)
                                {
                                    @(item.SourceNameList[idx].DisplayName);
                                }
                                else if (idx < 3)
                                {
                                    @(" / " + item.SourceNameList[idx].DisplayName);
                                }
                                else
                                {
                                    <span class="txt-grey">@(" + " + 
                                        (item.SourceNameList.Count - 3).ToString() + 
                                        " source" + 
                                        ((item.SourceNameList.Count - 3) > 1 ? "s" : ""))
                                    </span>;
                                    break;
                                }
                            }
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <p class="gd-list-brief">
                            @item.Summary
                        </p>
                    </div>
                </div>
            </div>

            if (makeFooter)
            {
                @Html.Raw("</div>")
            }
        }
    }
    @*UI for events END*@
</div>
<div id="cases-no-results">
    No events found based on your query.
    <div id="no-results" class="open-filter-panel">Modify your filters</div>
</div>

<script id="probability-template" type="text/x-kendo-template">
    <div class="template-wrapper row p-2">
        <div class="col-12"><img src="#= getImageUrl(target.data('image')) #" /></div>
        <div class="clearfix" />
        <div class="col-12">
            <div class="probability-title pb-1">#=target.data('title')#</div>
            # if (target.data('percentage')) { #
                <div class="probability-percentage pb-1 fs-w3 fs-s4">#=target.data('percentage')#</div>
            # } #
            <div class="probability-text" style="display:#=target.data('msg1')#;">Overall probability of at least one (1) #=target.data('port')# infected traveller in one month</div>
            <div class="probability-title" style="display:#=target.data('msg2')#;">Outbreak is occurring in or proximal to your area(s) of interest</div>
        </div>
    </div>
</script>

<script>
    $(function () {
        var baseSiteURL = '@Url.Content("~/")';

        $(".outlook-report").kendoTooltip({
            position: "right"
        });

        $(".gd-priority").kendoTooltip({
            content: function (e) {
                // Find the child element that is currently visible and use that as the target for the tooltip template
                var children = e.target.children();
                children = children.filter(function (i) {
                    return $(children[i]).css('display') !== 'none';
                }).filter('span');
                return children.length > 0 && (kendo.template($("#probability-template").html()))({ target: $(children[0]) });
            },
            position: "left",
            width: 180,
        });

        $(".gd-case").on("click", function (e) {
            $(".gd-case").removeClass("active");
            $(this).addClass("active");

            toggleSidebarLoadingOn();
            $("#gd-event-details").removeClass("show");
            $("#gd-sidebar-toggle").removeClass("metadata");

            var eventId = e.currentTarget.getAttribute("data-eventid");

            window.history.replaceState(null, null, "?eventId=" + eventId);
            getEventDetailPartialView(eventId);

            if (e.originalEvent) {
                // Only log on human-triggered clicks not synthetic clicks
                var eventTitle = $(e.currentTarget).find('.gd-event-title') && $(e.currentTarget).find('.gd-event-title')[0].innerHTML.trim();
                window.gtagh('@Html.Raw(Constants.GoogleAnalytics.Action.OPEN_EVENT_DETAILS)', '@Html.Raw(Constants.GoogleAnalytics.Category.EVENTS)', 'Open from list: ' + eventId + ' |  ' + eventTitle, parseInt(eventId));
            }
        });

        $msgContainer = $("#gd-count-message-container");
        var filterCount = @evtIdList.Count;
        var globalCount = Number($msgContainer.find("#global-count").text());
        if (filterCount >= globalCount) {
            $msgContainer.find("#filter-count-text").hide();
            $msgContainer.find("#global-count-text").show();
        }
        else {
            $msgContainer.find("#global-count-text").hide();
            $msgContainer.find("#filter-count").text(filterCount);
            $msgContainer.find("#filter-count-text").show();
            if ($("#gd-location-selection").find("#my-location div[data-geonameid]").length > 1) {
                $msgContainer.find("#one-aoi").hide();
                $msgContainer.find("#multi-aoi").show();
            }
            else {
                $msgContainer.find("#multi-aoi").hide();
                $msgContainer.find("#one-aoi").show();
            }
        }

        $(".open-filter-panel").on("click", function (e) {
            window.FilterPanelMethods.open(e);
            window.gtagh(
                '@Html.Raw(Constants.GoogleAnalytics.Action.CLICK_MODIFY_FILTERS)',
                '@Html.Raw(Constants.GoogleAnalytics.Category.FILTERS)',
                'Modify filters from empty event list');
        });

        resizeCasesContainer()
    });

    function getImageUrl(image) {
        var url = "@Url.Content("~/Areas/DashboardPage/Content/images/")" + image + ".svg";
        return url;
    }
</script>