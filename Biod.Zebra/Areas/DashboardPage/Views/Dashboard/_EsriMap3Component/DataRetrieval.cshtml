@model Biod.Zebra.Library.Models.EventsInfoViewModel
@using Newtonsoft.Json;

<script>
    function getViewModelEventInfo() {
        var eventsMap = JSON.parse(`@Html.Raw(JsonConvert.SerializeObject(Model.EventsMap))`);
        var ctryArr = [];
        var evtArr = [];

        for (var i = 0; i < eventsMap.length; i++) {
            ctryArr.push({
                CountryGeonameId: eventsMap[i].CountryGeonameId,
                CountryName: eventsMap[i].CountryName,
                CountryPoint: eventsMap[i].CountryPoint
            });
        }
        @*@foreach(var item in Model.EventsMap) {
            @:ctryArr.push({
                @:CountryGeonameId: @item.CountryGeonameId,
                @:CountryName: "@item.CountryName",
                //TODO: NumOfEvents does not always match actualy event count. 
                        //Not in use at the moment
                //@:NumOfEvents: @item.NumOfEvents,
                @:CountryPoint: "@item.CountryPoint"
            @:});
        }*@

        @foreach(var item in Model.EventsInfo) {
            @:evtArr.push({
                @:EventId: @item.EventId,
                @:EventTitle: "@item.EventTitle",
                @:Summary: '@System.Text.RegularExpressions.Regex.Replace(item.Summary, @"\r\n?|\n", " ")',
                @:CountryName: "@item.EventCountry.CountryName",
                @:StartDate: "@item.StartDate",
                @:EndDate: "@item.EndDate",
                @:PriorityTitle: "@item.ExportationPriorityTitle",
                @:HasOutlookReport: "@item.HasOutlookReport".toLowerCase() == "true"
            @:});
        }

        return { countryArray: ctryArr, eventArray: evtArr };
    }

    function getCountryShape(id) {
        Dashboard.Prop.runningGeonameId = id;
        var df = $.Deferred();
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetCountryShapeAsText", "Dashboard")',
            data: {
                'GeonameId': id
            },
            success: function (data) {
                if (Dashboard.Prop.runningGeonameId == id && data.length > 0) {
                    if (data.substring(0, 4).toLowerCase() == "mult") {
                        var retVal = [];
                        var temp = data.substring(15, data.length - 2).split("), (");

                        for (var i = 0; i < temp.length; i++) {
                            //if (temp[i][0] == "(") {
                            var temp2 = temp[i].replace(/\(|\)/g, "").split(", ");
                            var tempOut = [];

                            var prevX = null;
                            var prevY = null;
                            var crossedDateLine = [];

                            for (var j = 0; j < temp2.length; j++) {
                                var xy = temp2[j].split(" ");

                                var x = Number(xy[0]);
                                var y = Number(xy[1]);

                                if (prevX != null && x < prevX - 180) {
                                    crossedDateLine.push([x, y]);
                                    x = prevX;
                                    y = prevY
                                }
                                else {
                                    prevX = x;
                                    prevY = y;
                                }

                                //DO NOT REMOVE THE COMMENTED CODE BELOW
                                //if (x < -20037508.342787) { x = -20037508.342787 };
                                //if (x > 20037508.342787) { x = 20037508.342787 };
                                //if (y < -20037508.342787) { y = -20037508.342787 };
                                //if (y > 20037508.342787) { y = 20037508.342787 };

                                tempOut.push([x, y]);
                            }

                            if (crossedDateLine.length > 0) {
                                crossedDateLine.push(crossedDateLine[0]);
                                retVal.push(crossedDateLine);
                            }

                            if (tempOut.length > 0) {
                                retVal.push(tempOut);
                            }
                            //}
                        }
                        df.resolve(retVal);
                    }
                    else {
                        var retVal = [];
                        var temp = data.substring(10, data.length - 2).split("), (");
                        for (var j = 0; j < temp.length; j++) {
                            temp2 = temp[j].split(", ");
                            tempOut = [];

                            var prevX = null;
                            var prevY = null;
                            var crossedDateLine = [];

                            for (var i = 0; i < temp2.length; i++) {
                                var xy = temp2[i].split(" ");

                                var x = Number(xy[0]);
                                var y = Number(xy[1]);

                                if (prevX != null && x < prevX - 180) {
                                    crossedDateLine.push([x, y]);
                                    x = prevX;
                                    y = prevY
                                }
                                else {
                                    prevX = x;
                                    prevY = y;
                                }

                                tempOut.push([x, y]);
                            }

                            if (crossedDateLine.length > 0) {
                                crossedDateLine.push(crossedDateLine[0]);
                                retVal.push(crossedDateLine);
                            }

                            retVal.push(tempOut);
                        }
                        df.resolve(retVal);
                    }
                }
                else {
                    df.reject();
                }
            },
            error: function (err) {
                df.reject();
            }
        });

        return df;
    }

    function getDestinationAirport(id) {
        Dashboard.Prop.runningEventId = id;
        var df = $.Deferred();
        
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetDestinationAirports", "Dashboard")',
            dataType: "json",
            data: {
                'EventId': id,
                'GeonameIds': window.filterParams.geonameIds || '-1'
            },
            success: function (data) {
                if (Dashboard.Prop.runningEventId == id && data.length > 0) {
                    if (data.length == 1 &&
                        data[0].CityDisplayName == "-") {

                        df.reject();
                    }
                    else {
                        df.resolve(data);
                    }
                }
                else {
                    df.reject();
                }
            },
            error: function (err) {
                df.reject();
            }
        });

        return df;
    }

    function getEventLocationCity(id) {
        Dashboard.Prop.runningEventId = id;
        var df = $.Deferred();
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetEventLocations", "Dashboard")',
            dataType: "json",
            data: {
                'EventId': id,
                'LocationType': 'City'
            },
            success: function (data) {
                df.resolve(data);
            },
            error: function (err) {
                df.reject();
            }
        });

        return df;
    }

    function getEventLocationArea(id) {
        Dashboard.Prop.runningEventId = id;
        var df = $.Deferred();
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetEventLocations", "Dashboard")',
            dataType: "json",
            data: {
                'EventId': id,
                'LocationType': 'Province|Country'
            },
            success: function (result) {
                //df.resolve(data);
                var retVal = [];
                for (var k = 0; k < result.length; k++) {
                    var data = result[k].ShapeAsText;
                    var geonameId = result[k].GeonameId;

                    if (data.substring(0, 4).toLowerCase() == "mult") {
                        var tempRes = [];
                        var temp = data.substring(15, data.length - 2).split("), (");
                        for (var i = 0; i < temp.length; i++) {
                            //if (temp[i][0] == "(") {
                            var temp2 = temp[i].replace(/\(|\)/g, "").split(", ");
                            var tempOut = [];
                            for (var j = 0; j < temp2.length; j++) {
                                var xy = temp2[j].split(" ");
                                tempOut.push([Number(xy[0]), Number(xy[1])]);
                            }
                            if (tempOut.length > 0) {
                                tempRes.push(tempOut);
                            }
                            //}
                        }
                        retVal.push({ "GeonameId": geonameId, "Shape": tempRes });
                    }
                    else {
                        var tempRes = [];
                        var temp = data.substring(10, data.length - 2).split("), (");
                        for (var j = 0; j < temp.length; j++) {
                            temp2 = temp[j].split(", ");
                            tempOut = [];
                            for (var i = 0; i < temp2.length; i++) {
                                var xy = temp2[i].split(" ");
                                tempOut.push([Number(xy[0]), Number(xy[1])]);
                            }
                            tempRes.push(tempOut);
                        }
                        retVal.push({ "GeonameId": geonameId, "Shape": tempRes });
                    }
                }
                df.resolve(retVal);
            },
            error: function(err) {
                df.reject();
            }
        });

        return df;
    }
</script>