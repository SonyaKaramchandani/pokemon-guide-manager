<script>
    require([
        "esri/layers/FeatureLayer",
        "esri/geometry/Polygon",
        "esri/graphic"
    ], function (
        FeatureLayer,
        Polygon,
        Graphic) {

            //=====Feature layer helper functions START=====
            function initCountryPolygon() {
                var countryPolygonLayer;

                var featureCollection = {
                    "layerDefinition": null,
                    "featureSet": {
                        "features": [],
                        "geometryType": "esriGeometryPolygon"
                    }
                };
                featureCollection.layerDefinition = {
                    "geometryType": "esriGeometryPolygon",
                    "objectIdField": "ObjectID",
                    "drawingInfo": {
                        "renderer": {
                            "type": "simple",
                            "symbol": {
                                "type": "esriSFS",
                                "style": "esriSFSSolid",
                                "color": [41, 97, 169, 70],
                                "outline": {
                                    "type": "esriSLS",
                                    "style": "esriSLSSolid",
                                    "color": [41, 97, 169, 255],
                                    "width": 1
                                }
                            }
                        }
                    },
                    "fields": [
                        {
                            "name": "ObjectID",
                            "alias": "ObjectID",
                            "type": "esriFieldTypeOID"
                        }
                    ]
                };

                countryPolygonLayer = new FeatureLayer(featureCollection, {
                    id: 'countryPolygonLayer',
                    //infoTemplate: popupTemplate,
                    outFields: ["*"]
                });

                Dashboard.Prop.map.addLayer(countryPolygonLayer);

                function addCountryPolygon(geonameId) {
                    if (geonameId) {
                        getCountryShape(geonameId).then(
                            function (result) {
                                addData({ "GeonameId": geonameId, "Shape": result });
                            },
                            function (err) {

                            }
                        );
                    }
                }

                Dashboard.Func.addCountryPolygon = addCountryPolygon;

                function removeAllCountryPolygon() {
                    Dashboard.Prop.runningGeonameId = null;
                    if (countryPolygonLayer.graphics && countryPolygonLayer.graphics.length > 0) {
                        countryPolygonLayer.applyEdits(null, null, countryPolygonLayer.graphics);
                    }
                }

                Dashboard.Func.removeAllCountryPolygon = removeAllCountryPolygon;

                function addData(input) {
                    var features = [];
                    var attr = {};
                    attr["sourceData"] = { "GeonameId": input.GeonameId };//item;

                    var polygonJson = {
                        "rings": input.Shape,
                        "spatialReference": { "wkid": 4326 }
                    };

                    var geometry = new Polygon(polygonJson);

                    var graphic = new Graphic(geometry);
                    graphic.setAttributes(attr);
                    features.push(graphic);

                    countryPolygonLayer.applyEdits(features, null, countryPolygonLayer.graphics);//3rd parameter is fail proof way to remove the previous graphic 
                }

            }
            Dashboard.Func.initCountryPolygon = initCountryPolygon;

            function initEventDetailPolygon() {
                var eventDetailPolygon;

                var featureCollection = {
                    "layerDefinition": null,
                    "featureSet": {
                        "features": [],
                        "geometryType": "esriGeometryPolygon"
                    }
                };
                featureCollection.layerDefinition = {
                    "geometryType": "esriGeometryPolygon",
                    "objectIdField": "ObjectID",
                    "drawingInfo": {
                        "renderer": {
                            "type": "simple",
                            "symbol": {
                                "type": "esriSFS",
                                "style": "esriSFSSolid",
                                "color": [211, 89, 85, 70],
                                "outline": {
                                    "type": "esriSLS",
                                    "style": "esriSLSSolid",
                                    "color": [211, 89, 85, 255],
                                    "width": 1
                                }
                            }
                        }
                    },
                    "fields": [
                        {
                            "name": "ObjectID",
                            "alias": "ObjectID",
                            "type": "esriFieldTypeOID"
                        }
                    ]
                };

                eventDetailPolygon = new FeatureLayer(featureCollection, {
                    id: 'eventDetailPolygon',
                    //infoTemplate: popupTemplate,
                    outFields: ["*"]
                });

                Dashboard.Prop.eventDetailMap.addLayer(eventDetailPolygon);

                function addOutbreakPolygon(geonameId) {
                    if (geonameId) {
                        getEventLocationArea(geonameId).then(
                            function (result) {
                                if (result.length > 0) {
                                    addData(result[0]);
                                }
                            },
                            function (err) {

                            }
                        );
                    }
                }

                Dashboard.Func.addOutbreakPolygon = addOutbreakPolygon;

                function removeAllOutbreakPolygon() {
                    Dashboard.Prop.runningGeonameId = null;
                    if (eventDetailPolygon.graphics && eventDetailPolygon.graphics.length > 0) {
                        eventDetailPolygon.applyEdits(null, null, eventDetailPolygon.graphics);
                    }
                }

                Dashboard.Func.removeAllOutbreakPolygon = removeAllOutbreakPolygon;

                function addData(input) {
                    var features = [];
                    var attr = {};
                    attr["sourceData"] = { "GeonameId": input.GeonameId };//item;

                    var polygonJson = {
                        "rings": input.Shape,
                        "spatialReference": { "wkid": 4326 }
                    };

                    var geometry = new Polygon(polygonJson);

                    var graphic = new Graphic(geometry);
                    graphic.setAttributes(attr);
                    features.push(graphic);

                    eventDetailPolygon.applyEdits(features, null, eventDetailPolygon.graphics);//3rd parameter is fail proof way to remove the previous graphic 
                }

            }
            Dashboard.Func.initEventDetailPolygon = initEventDetailPolygon;
            //=====Feature layer helper functions END=====
        }
    );

</script>