//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BdDataApi.EntityModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ZebraEntities : DbContext
    {
        public ZebraEntities()
            : base("name=ZebraEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ArticleFeed> ArticleFeeds { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventCreationReason> EventCreationReasons { get; set; }
        public virtual DbSet<EventPriority> EventPriorities { get; set; }
        public virtual DbSet<HamType> HamTypes { get; set; }
        public virtual DbSet<Xtbl_Article_Location> Xtbl_Article_Location { get; set; }
        public virtual DbSet<Xtbl_Article_Location_Disease> Xtbl_Article_Location_Disease { get; set; }
        public virtual DbSet<Xtbl_Event_Location> Xtbl_Event_Location { get; set; }
        public virtual DbSet<Xtbl_RelatedArticles> Xtbl_RelatedArticles { get; set; }
        public virtual DbSet<ProcessedArticle> ProcessedArticles { get; set; }
    
        public virtual ObjectResult<Nullable<int>> usp_GetZebraEventDestinationGrids(Nullable<int> eventId, Nullable<decimal> distance)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetZebraEventDestinationGrids", eventIdParameter, distanceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_SetZebraSourceDestinations(Nullable<int> eventId, string version)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_SetZebraSourceDestinations", eventIdParameter, versionParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventArticlesByEventId_Result> usp_GetZebraEventArticlesByEventId(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventArticlesByEventId_Result>("usp_GetZebraEventArticlesByEventId", eventIdParameter);
        }
    
        public virtual ObjectResult<usp_GetGeonameCities_Result> usp_GetGeonameCities(string inputTerm)
        {
            var inputTermParameter = inputTerm != null ?
                new ObjectParameter("inputTerm", inputTerm) :
                new ObjectParameter("inputTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGeonameCities_Result>("usp_GetGeonameCities", inputTermParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventCaseCountsByEventId_Result> usp_GetZebraEventCaseCountsByEventId(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventCaseCountsByEventId_Result>("usp_GetZebraEventCaseCountsByEventId", eventIdParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventDestinationAirportsByEventId_Result> usp_GetZebraEventDestinationAirportsByEventId(Nullable<int> eventId, string geonameIds)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var geonameIdsParameter = geonameIds != null ?
                new ObjectParameter("GeonameIds", geonameIds) :
                new ObjectParameter("GeonameIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventDestinationAirportsByEventId_Result>("usp_GetZebraEventDestinationAirportsByEventId", eventIdParameter, geonameIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventDetailInfoByEventId_Result> usp_GetZebraEventDetailInfoByEventId(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventDetailInfoByEventId_Result>("usp_GetZebraEventDetailInfoByEventId", eventIdParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventDiseaseInfoByEventId_Result> usp_GetZebraEventDiseaseInfoByEventId(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventDiseaseInfoByEventId_Result>("usp_GetZebraEventDiseaseInfoByEventId", eventIdParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventInfo_Result> usp_GetZebraEventInfo(Nullable<int> geonameId, Nullable<int> distance)
        {
            var geonameIdParameter = geonameId.HasValue ?
                new ObjectParameter("GeonameId", geonameId) :
                new ObjectParameter("GeonameId", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventInfo_Result>("usp_GetZebraEventInfo", geonameIdParameter, distanceParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventInfoByEventId_Result> usp_GetZebraEventInfoByEventId(Nullable<int> eventId, Nullable<int> distance)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventInfoByEventId_Result>("usp_GetZebraEventInfoByEventId", eventIdParameter, distanceParameter);
        }
    
        public virtual int usp_GetZebraEventInfoByEventIdAndGeonameId(Nullable<int> eventId, Nullable<int> geonameId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var geonameIdParameter = geonameId.HasValue ?
                new ObjectParameter("GeonameId", geonameId) :
                new ObjectParameter("GeonameId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetZebraEventInfoByEventIdAndGeonameId", eventIdParameter, geonameIdParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventInfoByGeonameId_Result> usp_GetZebraEventInfoByGeonameId(Nullable<int> geonameId)
        {
            var geonameIdParameter = geonameId.HasValue ?
                new ObjectParameter("GeonameId", geonameId) :
                new ObjectParameter("GeonameId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventInfoByGeonameId_Result>("usp_GetZebraEventInfoByGeonameId", geonameIdParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventLocationsShapesByEventId_Result> usp_GetZebraEventLocationsShapesByEventId(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventLocationsShapesByEventId_Result>("usp_GetZebraEventLocationsShapesByEventId", eventIdParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventsInfo_Result> usp_GetZebraEventsInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventsInfo_Result>("usp_GetZebraEventsInfo");
        }
    
        public virtual ObjectResult<usp_GetZebraEventsInfoByDiseaseId_Result> usp_GetZebraEventsInfoByDiseaseId(Nullable<int> diseaseId)
        {
            var diseaseIdParameter = diseaseId.HasValue ?
                new ObjectParameter("DiseaseId", diseaseId) :
                new ObjectParameter("DiseaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventsInfoByDiseaseId_Result>("usp_GetZebraEventsInfoByDiseaseId", diseaseIdParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventsInfoSummary_Result> usp_GetZebraEventsInfoSummary(string userId, string geonameIds, string diseasesIds, string transmissionModesIds, string prevensionMethods, string severityRisks, string biosecurityRisks)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var geonameIdsParameter = geonameIds != null ?
                new ObjectParameter("GeonameIds", geonameIds) :
                new ObjectParameter("GeonameIds", typeof(string));
    
            var diseasesIdsParameter = diseasesIds != null ?
                new ObjectParameter("DiseasesIds", diseasesIds) :
                new ObjectParameter("DiseasesIds", typeof(string));
    
            var transmissionModesIdsParameter = transmissionModesIds != null ?
                new ObjectParameter("TransmissionModesIds", transmissionModesIds) :
                new ObjectParameter("TransmissionModesIds", typeof(string));
    
            var prevensionMethodsParameter = prevensionMethods != null ?
                new ObjectParameter("PrevensionMethods", prevensionMethods) :
                new ObjectParameter("PrevensionMethods", typeof(string));
    
            var severityRisksParameter = severityRisks != null ?
                new ObjectParameter("SeverityRisks", severityRisks) :
                new ObjectParameter("SeverityRisks", typeof(string));
    
            var biosecurityRisksParameter = biosecurityRisks != null ?
                new ObjectParameter("BiosecurityRisks", biosecurityRisks) :
                new ObjectParameter("BiosecurityRisks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventsInfoSummary_Result>("usp_GetZebraEventsInfoSummary", userIdParameter, geonameIdsParameter, diseasesIdsParameter, transmissionModesIdsParameter, prevensionMethodsParameter, severityRisksParameter, biosecurityRisksParameter);
        }
    
        public virtual ObjectResult<usp_GetZebraEventsMap_Result> usp_GetZebraEventsMap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventsMap_Result>("usp_GetZebraEventsMap");
        }
    
        public virtual ObjectResult<usp_GetZebraEventSourceAirportsByEventId_Result> usp_GetZebraEventSourceAirportsByEventId(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetZebraEventSourceAirportsByEventId_Result>("usp_GetZebraEventSourceAirportsByEventId", eventIdParameter);
        }
    
        public virtual ObjectResult<string> usp_GetZebraGridIdByGeonameId(Nullable<int> geonameId)
        {
            var geonameIdParameter = geonameId.HasValue ?
                new ObjectParameter("GeonameId", geonameId) :
                new ObjectParameter("GeonameId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetZebraGridIdByGeonameId", geonameIdParameter);
        }
    
        public virtual ObjectResult<string> usp_GetZebraLocationNameByGeonameId(Nullable<int> geonameId)
        {
            var geonameIdParameter = geonameId.HasValue ?
                new ObjectParameter("GeonameId", geonameId) :
                new ObjectParameter("GeonameId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetZebraLocationNameByGeonameId", geonameIdParameter);
        }
    
        public virtual ObjectResult<string> usp_ZebraGetCountryShapeByGeonameId(Nullable<int> geonameId)
        {
            var geonameIdParameter = geonameId.HasValue ?
                new ObjectParameter("GeonameId", geonameId) :
                new ObjectParameter("GeonameId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ZebraGetCountryShapeByGeonameId", geonameIdParameter);
        }
    }
}
